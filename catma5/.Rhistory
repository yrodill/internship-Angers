filter_missing_values <- function(df,threshold){
lineToDelete <- c()
if(threshold == 1){
return (df)
}
else{
threshold <- ncol(df)*threshold
for(row in 1:nrow(df)){
nbMiss<-0
for(col in 1:ncol(df)){
if(df[row,col]=="" || is.na(df[row,col])){
nbMiss<-nbMiss+1
}
}
if(nbMiss > threshold){
lineToDelete <- c(lineToDelete,row)
}
}
}
}
#Bootstrap to keep only a few part of the data randomly
bootstrap <- function(df,ratio){
lineToKeep <- c()
limit <- nrow(df)*ratio
while(len(lineToKeep)<limit){
number <- sample(1:nrow(df),1)
while(!(number %in% lineToKeep)){
number <- sample(1:nrow(df),1)
}
lineToKeep <- c(lineToKeep,number)
}
return (df[lineToKeep,])
}
#Function to replace missing values by a random value from another experience for the same gene
replace_missing_values <- function(df, threshold) {
if(threshold == 0){
return (df)
}
else{
newcolumn <- 0
for(row in 1:nrow(df)){
for(col in 1:ncol(df)){
if(df[row,col]=="" || is.na(df[row,col])){
while(is.na(df[row,col])){
newcolumn <- sample(1:ncol(df),1)
df[row,col]=df[row,newcolumn]
}
}
}
}
}
return (df)
}
gen3_c_filtered <- filter_experiences(gen3,"all","~/internship-Angers/catma5/sorted_exp_by_stress.json")
#Load libraries
library("rjson")
library("boot")
library("GENIE3")
gen3_c_filtered <- filter_experiences(gen3,"all","~/internship-Angers/catma5/sorted_exp_by_stress.json")
gen3_filtered <- filter_missing_values(gen3_c_filtered,1)
#Bootstrap à 80% des données
gen3_boot <- bootstrap(gen3_filtered,0.8)
#Bootstrap to keep only a few part of the data randomly
bootstrap <- function(df,ratio){
lineToKeep <- c()
limit <- nrow(df)*ratio
while(length(lineToKeep)<limit){
number <- sample(1:nrow(df),1)
while(!(number %in% lineToKeep)){
number <- sample(1:nrow(df),1)
}
lineToKeep <- c(lineToKeep,number)
}
return (df[lineToKeep,])
}
#Bootstrap à 80% des données
gen3_boot <- bootstrap(gen3_filtered,0.8)
#Bootstrap to keep only a few part of the data randomly
bootstrap <- function(df,ratio){
lineToKeep <- c()
limit <- nrow(df)*ratio
while(length(lineToKeep)<limit){
print(length(lineToKeep))
print(limit)
number <- sample(1:nrow(df),1)
while(!(number %in% lineToKeep)){
number <- sample(1:nrow(df),1)
}
lineToKeep <- c(lineToKeep,number)
}
return (df[lineToKeep,])
}
gen3_boot <- bootstrap(gen3_filtered,0.8)
#Bootstrap to keep only a few part of the data randomly
bootstrap <- function(df,ratio){
lineToKeep <- c()
limit <- round(nrow(df)*ratio)
while(length(lineToKeep)<limit){
print(length(lineToKeep))
print(limit)
number <- sample(1:nrow(df),1)
while(number %in% lineToKeep){
number <- sample(1:nrow(df),1)
}
lineToKeep <- c(lineToKeep,number)
}
return (df[lineToKeep,])
}
gen3_boot <- bootstrap(gen3_filtered,0.8)
#Function to replace missing values by a random value from another experience for the same gene
replace_missing_values <- function(df, threshold) {
if(threshold == 0){
return (df)
}
else{
newcolumn <- 0
for(row in 1:nrow(df)){
for(col in 1:ncol(df)){
if(df[row,col]=="" || is.na(df[row,col])){
while(is.na(df[row,col])){
newcolumn <- sample(1:ncol(df),1)
df[row,col]=df[row,newcolumn]
}
}
}
}
}
return (df)
}
#Replace missing values by random value from the gene expression
test <- replace_missing_values(gen3_boot,1)
#Function to replace missing values by a random value from another experience for the same gene
replace_missing_values <- function(df, threshold) {
if(threshold == 0){
return (df)
}
else{
nb_missing_values_changed <-0
newcolumn <- 0
for(row in 1:nrow(df)){
for(col in 1:ncol(df)){
if(df[row,col]=="" || is.na(df[row,col])){
while(is.na(df[row,col])){
newcolumn <- sample(1:ncol(df),1)
df[row,col]=df[row,newcolumn]
}
nb_missing_values_changed <- nb_missing_values_changed +1
print(nb_missing_values_changed)
}
}
}
}
return (df)
}
#Replace missing values by random value from the gene expression
test <- replace_missing_values(gen3_boot,1)
gen3_filtered <- filter_missing_values(gen3_c_filtered,0.1)
gen3_boot <- bootstrap(gen3_filtered,0.8)
#Bootstrap to keep only a few part of the data randomly
bootstrap <- function(df,ratio){
lineToKeep <- c()
limit <- round(nrow(df)*ratio)
print(limit)
while(length(lineToKeep)<limit){
print(length(lineToKeep))
print(limit)
number <- sample(1:nrow(df),1)
while(number %in% lineToKeep){
number <- sample(1:nrow(df),1)
}
lineToKeep <- c(lineToKeep,number)
}
return (df[lineToKeep,])
}
gen3_boot <- bootstrap(gen3_filtered,0.8)
#Bootstrap to keep only a few part of the data randomly
bootstrap <- function(df,ratio){
lineToKeep <- c()
limit <- nrow(df)*ratio
print(limit)
while(length(lineToKeep)<limit){
print(length(lineToKeep))
print(limit)
number <- sample(1:nrow(df),1)
while(number %in% lineToKeep){
number <- sample(1:nrow(df),1)
}
lineToKeep <- c(lineToKeep,number)
}
return (df[lineToKeep,])
}
gen3_boot <- bootstrap(gen3_filtered,0.8)
gen3_c_filtered <- filter_experiences(gen3,"development","~/internship-Angers/catma5/sorted_exp_by_stress.json")
gen3_filtered <- filter_missing_values(gen3_c_filtered,0.1)
#Function to filter missing values
filter_missing_values <- function(df,threshold){
lineToDelete <- c()
if(threshold == 1){
return (df)
}
else{
threshold <- ncol(df)*threshold
for(row in 1:nrow(df)){
nbMiss<-0
for(col in 1:ncol(df)){
if(df[row,col]=="" || is.na(df[row,col])){
nbMiss<-nbMiss+1
}
}
if(nbMiss > threshold){
lineToDelete <- c(lineToDelete,row)
}
}
}
return(df[-lineToDelete,])
}
gen3_filtered <- filter_missing_values(gen3_c_filtered,0.1)
gen3_boot <- bootstrap(gen3_filtered,0.8)
dim(gen3_boot)
dim(gen3_filtered)
#Replace missing values by random value from the gene expression
test <- replace_missing_values(gen3_boot,0.1)
test_gen3 <- gen3_boot[1:20,1:50]
View(test_gen3)
test_gen3 <- replace_missing_values(test_gen3,0.1)
matrix <- GENIE3(test_gen3)
View(matrix)
link <- getLinkList(matrix)
View(link)
source('~/internship-Angers/catma5/GO_enrichment.R')
source('~/internship-Angers/catma5/GO_enrichment.R')
getwd()
setwd(dir ="/home/bothorel/internship-Angers/catma5/")
source('~/internship-Angers/catma5/GO_enrichment.R')
source('~/internship-Angers/catma5/GO_enrichment.R')
source('~/internship-Angers/catma5/GO_enrichment.R')
source('~/internship-Angers/catma5/GO_enrichment.R')
source('~/internship-Angers/catma5/GO_enrichment.R')
source('~/internship-Angers/catma5/GO_enrichment.R')
source('~/internship-Angers/catma5/GO_enrichment.R')
source('~/internship-Angers/catma5/GO_enrichment.R')
source('~/internship-Angers/catma5/GO_enrichment.R')
View(GO_groups_voted)
source('~/internship-Angers/catma5/GO_enrichment.R')
source('~/internship-Angers/catma5/GO_enrichment.R')
source('~/internship-Angers/catma5/GO_enrichment.R')
source('~/internship-Angers/catma5/GO_enrichment.R')
source('~/internship-Angers/catma5/GO_enrichment.R')
source('~/internship-Angers/catma5/GO_enrichment.R')
source('~/internship-Angers/catma5/GO_enrichment.R')
source('~/internship-Angers/catma5/GO_enrichment.R')
source('~/internship-Angers/catma5/GO_enrichment.R')
source('~/internship-Angers/catma5/GO_enrichment.R')
source('~/internship-Angers/catma5/GO_enrichment.R')
source('~/internship-Angers/catma5/GO_enrichment.R')
for(i in 1:length(GO_groups_voted[[1]][,3])){
if(GO_groups_voted[[1]][i,3] > 0.6){
print(GO_groups_voted[[1]][i,0])
GO_terms <- c(GO_terms,GO_groups_voted[[1]][i,3])
}
}
#auroc_network<-GO_groups_voted[[3]]
#auroc_degree<-mean(GO_groups_voted[[1]][,3])
GO <- GO_groups_voted[[1]][,0]
View(GO)
source('~/internship-Angers/catma5/GO_enrichment.R')
for(i in 1:length(GO_groups_voted[[1]][,3])){
if(GO_groups_voted[[1]][i,3] > 0.6){
GO_terms <- c(GO_terms,GO[[i]])
values <- c(values,GO_groups_voted[[1]][i,3])
}
}
#auroc_network<-GO_groups_voted[[3]]
#auroc_degree<-mean(GO_groups_voted[[1]][,3])
GO <- GO_groups_voted[[1]][,0]
for(l in GO){
print(l)
}
for(l in GO){
print(l)
}
print(GO)
print(typeof(GO))
#auroc_network<-GO_groups_voted[[3]]
#auroc_degree<-mean(GO_groups_voted[[1]][,3])
GO <- list(GO_groups_voted[[1]][,0])
GO_terms <- c()
values <- c()
for(i in 1:length(GO_groups_voted[[1]][,3])){
if(GO_groups_voted[[1]][i,3] > 0.6){
GO_terms <- c(GO_terms,GO[[i]])
values <- c(values,GO_groups_voted[[1]][i,3])
}
}
#auroc_network<-GO_groups_voted[[3]]
#auroc_degree<-mean(GO_groups_voted[[1]][,3])
GO <- list(GO_groups_voted[[1]][,0])
GO_terms <- c()
values <- c()
for(i in 1:length(GO_groups_voted[[1]][,3])){
if(GO_groups_voted[[1]][i,3] > 0.6){
GO_terms <- c(GO_terms,GO[i])
values <- c(values,GO_groups_voted[[1]][i,3])
}
}
print(GO_terms)
print(values)
for(i in GO){
print(i)
}
GO_terms <- c()
values <- c()
for(i in 1:length(GO_groups_voted[[1]][,3])){
if(GO_groups_voted[[1]][i,3] > 0.6){
print(GO[i])
GO_terms <- c(GO_terms,GO[i])
values <- c(values,GO_groups_voted[[1]][i,3])
}
}
for(i in 1:length(GO_groups_voted[[1]][,3])){
if(GO_groups_voted[[1]][i,3] > 0.6){
print(GO[,i])
GO_terms <- c(GO_terms,GO[i])
values <- c(values,GO_groups_voted[[1]][i,3])
}
}
for(i in 1:length(GO_groups_voted[[1]][,3])){
if(GO_groups_voted[[1]][i,3] > 0.6){
print(GO[[1]][i])
GO_terms <- c(GO_terms,GO[i])
values <- c(values,GO_groups_voted[[1]][i,3])
}
}
GO_terms <- c()
values <- c()
for(i in 1:length(GO_groups_voted[[1]][,3])){
if(GO_groups_voted[[1]][i,3] > 0.6){
print(GO[[0]][i])
GO_terms <- c(GO_terms,GO[i])
values <- c(values,GO_groups_voted[[1]][i,3])
}
}
source('~/internship-Angers/catma5/GO_enrichment.R')
#auroc_network<-GO_groups_voted[[3]]
#auroc_degree<-mean(GO_groups_voted[[1]][,3])
GO <- as.vector(GO_groups_voted[[1]][,0])
#auroc_network<-GO_groups_voted[[3]]
#auroc_degree<-mean(GO_groups_voted[[1]][,3])
GO <- GO_groups_voted[[1]][,0]
View(GO)
#auroc_network<-GO_groups_voted[[3]]
#auroc_degree<-mean(GO_groups_voted[[1]][,3])
GO <- list(GO_groups_voted[[1]][,0])
View(GO)
View(GO)
print(typeof(GO))
#auroc_network<-GO_groups_voted[[3]]
#auroc_degree<-mean(GO_groups_voted[[1]][,3])
GO <- GO_groups_voted[[1]][,0]
print(typeof(GO))
print(GO)
for(go in GO){
print(i)
i=i+1
}
source('~/internship-Angers/catma5/GO_enrichment.R')
#auroc_network<-GO_groups_voted[[3]]
#auroc_degree<-mean(GO_groups_voted[[1]][,3])
GO <- GO_groups_voted[[1]][,0]
View(GO)
#auroc_network<-GO_groups_voted[[3]]
#auroc_degree<-mean(GO_groups_voted[[1]][,3])
GO <- GO_groups_voted[[1]][,3]
print(typeof(GO))
#auroc_network<-GO_groups_voted[[3]]
#auroc_degree<-mean(GO_groups_voted[[1]][,3])
GO <- list(GO_groups_voted[[1]][,3])
View(GO)
for(go in GO){
print(go)
}
for(go in GO){
print(go[0])
}
for(go in GO){
print(go[1])
}
for(go in GO){
print(go[1][0])
}
for(go in GO){
print(go[1][1])
}
print(go[1][1][0])
print(go[1][1][1])
print(go[1][1])
print(go[1])
print(go[0])
print(go[2])
print(which(go[2])
}
GO_terms <- c()
values <- c()
for(i in 1:length(GO_groups_voted[[1]][,3])){
if(GO_groups_voted[[1]][i,3] > 0.6){
print(GO[i])
GO_terms <- c(GO_terms,GO[i])
values <- c(values,GO_groups_voted[[1]][i,3])
}
}
print(GO_terms)
print(values)
print(names(GO))
print(names(GO[1]))
print(names(GO[1][1]))
print((GO[1][1]))
print((GO[[1]][1]))
print(names(GO[[1]][1]))
#auroc_network<-GO_groups_voted[[3]]
#auroc_degree<-mean(GO_groups_voted[[1]][,3])
GO <- list(GO_groups_voted[[1]][,3])
print(names(GO[[1]][1]))
GO_terms <- c()
values <- c()
for(i in 1:length(GO_groups_voted[[1]][,3])){
if(GO_groups_voted[[1]][i,3] > 0.6){
GO_terms <- c(GO_terms,GO[[1]][i])
values <- c(values,GO_groups_voted[[1]][i,3])
}
}
print(GO_terms)
print(values)
print(GO_terms)
for(i in 1:length(GO_groups_voted[[1]][,3])){
if(GO_groups_voted[[1]][i,3] > 0.6){
GO_terms <- c(GO_terms,names(GO[[1]][i]))
values <- c(values,GO_groups_voted[[1]][i,3])
}
}
print(GO_terms)
print(values)
GO_terms <- c()
values <- c()
for(i in 1:length(GO_groups_voted[[1]][,3])){
if(GO_groups_voted[[1]][i,3] > 0.6){
GO_terms <- c(GO_terms,names(GO_groups_voted[[1]][i,3]))
values <- c(values,GO_groups_voted[[1]][i,3])
}
}
print(GO_terms)
print(values)
#auroc_network<-GO_groups_voted[[3]]
#auroc_degree<-mean(GO_groups_voted[[1]][,3])
GO <- list(GO_groups_voted[[1]][,3])
GO_terms <- c()
values <- c()
for(i in 1:length(GO_groups_voted[[1]][,3])){
if(GO_groups_voted[[1]][i,3] > 0.6){
GO_terms <- c(GO_terms,names(GO[[1]][i]))
values <- c(values,GO_groups_voted[[1]][i,3])
}
}
print(GO_terms)
print(values)
for(i in 1:length(GO_groups_voted[[1]][,3])){
if(GO_groups_voted[[1]][i,3] > 0.7){
GO_terms <- c(GO_terms,names(GO[[1]][i]))
values <- c(values,GO_groups_voted[[1]][i,3])
}
}
print(GO_terms)
print(values)
#auroc_network<-GO_groups_voted[[3]]
#auroc_degree<-mean(GO_groups_voted[[1]][,3])
GO <- list(GO_groups_voted[[1]][,3])
GO_terms <- c()
values <- c()
for(i in 1:length(GO_groups_voted[[1]][,3])){
if(GO_groups_voted[[1]][i,3] > 0.7){
GO_terms <- c(GO_terms,names(GO[[1]][i]))
values <- c(values,GO_groups_voted[[1]][i,3])
}
}
print(GO_terms)
print(values)
print(length(GO_terms))
print(length(values))
auroc_network<-GO_groups_voted[[3]]
auroc_degree<-mean(GO_groups_voted[[1]][,3])
data <- data.table(GO=GO_terms,value=values)
install.packages("data.table", lib="/home/bothorel/anaconda3/lib/R/library")
library(data.table)
data <- data.table(GO=GO_terms,value=values)
View(data)
source('~/internship-Angers/catma5/GO_enrichment.R')
View(data)
write.csv(data,'test.csv')
getwd()
source('~/internship-Angers/catma5/GO_enrichment.R')
source('~/internship-Angers/catma5/GO_enrichment.R')
adj.matrix <- as.matrix(read.csv("data/tmp_adj_matrix.csv",row.names = 1))
agrigo <- as.matrix(read.csv("data/tmp_GO_matrix.csv",row.names = 1))
GO_groups_voted <-run_GBA(adj.matrix,agrigo, min=20, max=1000, nfold=3)
source('~/internship-Angers/catma5/GO_enrichment.R')
source('~/internship-Angers/catma5/GO_enrichment.R')
for(i in 1:length(GO_groups_voted[[1]][,3])){
if(GO_groups_voted[[1]][i,3] > 0.6){
GO_terms <- c(GO_terms,names(GO[[1]][i]))
values <- c(values,GO_groups_voted[[1]][i,3])
}
}
source('~/internship-Angers/catma5/GO_enrichment.R')
